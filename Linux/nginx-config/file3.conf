# các kiểu optional_modifier: là kiểu so sánh để đối chiếu với location_match

1.
# sử dụng regex cho các URI
"~"  must be used for case sensitive matching
# sử dụng regex cho các URi cho phép cả chữ hoa lẫn chữ thường
"~*" must be used for case insensitive matching

# URI phải có chính xác giống như location_match
2.
location  = / {
  # "=" this matches only the / query.
  # configuration example #1
}

# tất cả các req có uri bắt đầu bằng / sẽ được chuyển cho location block này xử lý
3.
location  / {
  # matches any query due to the fact that all queries begin at /, however, regular expressions will 
  # be matched at first place.

  # configuration example #2  
}


location /data/ {
  # this config matches any query beginning with /data/ and then continues searching,
  # in this example regular expressions will be checked and /data/ will be matched only if
  # regular expressions don't find a match.
  # configuration example #3
}


location ^~ /img/ {
  # matches any query beginning with /img/ and then stops searching,
  # in this example there is not place for regular expressions.

  # configuration example #4 
}


location ~* .(png|ico|gif|jpg|jpeg)$ {
  # this config matches any request ending in png, ico, gif, jpg or jpeg. However, all
  # requests to the /img/ directory will be handled by the previous location block we defined
  # at the previous example config #4

  # your configuration here #5  
}


server {
    listen 80;
    listen 443 ssl;
    server_name olddomain.com www.olddomain.com;
    # chuyển người dùng sang domain mới
    return 301 $scheme://www.newdomain.com$request_uri;
}
In this case, $scheme and $request_uri are nginx variables and they are used to capture and replicate the values from the original request URL ($scheme is the protocol – ‘http’ or ‘https’ and $request_uri is the portion of the URL that follows the domain name – for example ‘/getUser?id=blabla’)



1. ví dụ nginx rewrite sử dụng $1 ...
Mã:
rewrite ^/data/(.*)$ /$1;
- ví dụ url đầu là /data/create-test sẽ được nginx rewrite thành /create-test.
- (.*) là match tất cả các ký tự đứng đằng sau '/data/' và được gán thành $1.
2. Ví dụ về Nginx rewrite với cờ "last"
Mã:
rewrite ^/data/(.*)$ /$1 last;
- Cũng như ví dụ 1, url /data/create-test sẽ rewrite thành /create-test, nhưng chú ý rằng có thêm chữ "last" ở cuối dòng rewrite.
- Cờ "last" sẽ chắc chắn dừng tìm kiếm URL đã rewrite trong location hiện tại và tìm kiếm location mới với URI đã được rewrite
3. Cờ "break"
Mã:
rewrite ^/data/(.*)$ /$1 break;
- Khác với ví dụ 2 là ở cuối dòng rewrite là cờ "break"
- Cờ "break" ở cuối sẽ dừng hẳn process sau khi thay đổi URI và URI đã write sẽ ko tới các location khác trong file config.
Các cờ khác trong Nginx:
- Cờ "permanent": Redirect url incoming với mã code là 301.
- Cờ "redirect": redirect url incoming với mã code 302 và được sử dụng nhiều trong redirect từ http sang https.
4. Ghi log Nginx rewrite
Để chắc chắn rằng các rule rewrite của bạn hoạt động ổn và không bị miss trường hợp nào, bật tính năng ghi log nginx rewrite sẽ cho bạn kết quả đó.
Mã:
error_log /var/log/nginx/error.log notice;
rewrite_log on;